# -*- mode:ruby -*-

require 'rake/clean'
require 'erb'
require File.join(File.dirname(__FILE__), 'weboptimizer.rb')

PYTHON          = 'python'
JAVA            = 'java'
CLOSURECOMPILER = File.expand_path('../bin/compiler.jar')
YUICOMPRESSOR   = File.expand_path('../bin/yuicompressor.jar')

CLOSURE_LIB_DIR = File.expand_path('closure-library')
DEPSWRITER      = File.join(CLOSURE_LIB_DIR, 'closure/bin/build/depswriter.py')
CLOSUREBUILDER  = File.join(CLOSURE_LIB_DIR, 'closure/bin/build/closurebuilder.py')
DEPS_FILE       = 'deps.js'
SCRIPT_DIRS     = ['scripts', 'wgui']
NAMESPACES      = ['closurekitchen', 'closuredocs']
STATIC_DIR      = 'files'
CODEMIRROR_DIR  = 'codemirror'
CODEMIRROR_JS   = ['util.js','stringstream.js','select.js','undo.js','editor.js','tokenize.js']
CODEMIRROR_CSS  = ['xmlcolors.css', 'jscolors.css',	'csscolors.css']
EXTERNS         = ['externs/codemirror.js']

SERVER_DIR      = File.expand_path('../server')
SERVER_JS_DIR   = File.join(SERVER_DIR, 'closurejs')
SERVER_JS_REGEX = Regexp.escape(SERVER_JS_DIR)
SERVER_DEPS_PY  = File.join(SERVER_DIR, 'deps.py')

SERVER_JS_SRCS  = FileList[File.join(CLOSURE_LIB_DIR, 'closure/**/*.js'),
                           File.join(CLOSURE_LIB_DIR, 'third_party/**/*.js')]
SERVER_JS_SRCS.exclude('**/*_test.js').exclude('**/deps.js')
SERVER_JS_TRGS  = SERVER_JS_SRCS.gsub(/^#{Regexp.escape(CLOSURE_LIB_DIR)}/u, SERVER_JS_DIR)

CLOBBER.include(File.join(SERVER_DIR, STATIC_DIR))
CLOBBER.include(File.join(SERVER_DIR, 'closure-library'))
CLOBBER.include(SERVER_JS_DIR)
CLOBBER.include(SERVER_DEPS_PY)

OPTIMIZE_OPTIONS = {
  :python          => PYTHON,
  :java            => JAVA,
  :yuicompressor   => YUICOMPRESSOR,
  :closurecompiler => CLOSURECOMPILER,
  :closurelibrary  => CLOSURE_LIB_DIR,
  :closurebuilder  => CLOSUREBUILDER,
  :closureopts     => {
    '--define'            => 'goog.DEBUG=false',
    '--output_wrapper'    => '(function(){%output%})();',
    '--externs'           => EXTERNS,
    '--compilation_level' => 'ADVANCED_OPTIMIZATIONS'
  },
  :css_url_map     => [[/^\.\.\/images\/tree\/(.+)/u, File.join(STATIC_DIR, 'images/\1')],
                       [/^\.\.\/images\/(.+)/u, File.join(STATIC_DIR, 'images/\1')]]
}
SERVER_JS_OPTS = OPTIMIZE_OPTIONS.merge( {
  :optimize    => true,
  :closureopts => { '--compilation_level' => 'SIMPLE_OPTIMIZATIONS' }
})

def copy_dir(src, dst)
  mkdir_p(dst, :verbose => false)
  dirs  = []
  files = []
  Dir.chdir(src) do
    Dir.glob('**/*') do |fname|
      (File.directory?(fname) ? dirs : files) << fname
    end
  end
  dirs.each do |dirname|
    mkdir_p(File.join(dst, dirname), :verbose => false)
  end
  files.each do |fname|
    cp(File.join(src, fname), File.join(dst, fname), :verbose => false)
  end
end

task :deps do
  sh ["#{PYTHON} #{DEPSWRITER}",
      SCRIPT_DIRS.map {|dir| "--root_with_prefix='#{dir} ../../../#{dir}'" },
      "--output_file=#{DEPS_FILE}"].flatten.join(' ')
end

task :build => [:index, :files, :script, :closurefiles, :closurejs] do
end

task :index do |t, args|
  opts            = OPTIMIZE_OPTIONS.dup
  opts[:optimize] = args['optimize'] != 'no'
  conv            = HtmlOptimizer.new(opts)
  html            = conv.render_file('index.html')
  File.open(File.join(SERVER_DIR, 'index.html'), 'w') do |file|
    file << html
  end
end

task :files do |t, args|
  copy_dir(STATIC_DIR, File.join(SERVER_DIR, STATIC_DIR))

  opts            = OPTIMIZE_OPTIONS.dup
  opts[:optimize] = args['optimize'] != 'no'
  conv            = JavaScriptOptimizer.new(opts)
  mkdir_p(File.join(SERVER_DIR, STATIC_DIR, 'codemirror'))

  jsfiles = (CODEMIRROR_JS + ['tokenizejavascript.js', 'parsejavascript.js']).map do |fname|
    File.join(CODEMIRROR_DIR, 'js', fname)
  end
  jscode = conv.optimize(*jsfiles)
  File.open(File.join(SERVER_DIR, STATIC_DIR, 'codemirror/javascript.js'), 'w') do |file|
    file << jscode
  end

  jsfiles = (CODEMIRROR_JS + ['parsexml.js', 'parsecss.js', 'tokenizejavascript.js',
                              'parsejavascript.js', 'parsehtmlmixed.js']).map do |fname|
    File.join(CODEMIRROR_DIR, 'js', fname)
  end
  jscode = conv.optimize(*jsfiles)
  File.open(File.join(SERVER_DIR, STATIC_DIR, 'codemirror/html.js'), 'w') do |file|
    file << jscode
  end

  cssfiles = CODEMIRROR_CSS.map {|fname| File.join(CODEMIRROR_DIR, 'css', fname) }
  csscode  = CssOptimizer.new(opts).optimize(*cssfiles)
  File.open(File.join(SERVER_DIR, STATIC_DIR, 'codemirror/codemirror.css'), 'w') do |file|
    file << csscode
  end
end

task :script do |t, args|
  opts            = OPTIMIZE_OPTIONS.dup
  opts[:optimize] = args['optimize'] != 'no'
  conv            = JavaScriptOptimizer.new(opts)
  namespaces      = NAMESPACES
  if args['target']
    namespaces = args['target'].split(',').map{|n| n.strip }
  end
  namespaces.each do |ns|
    print "building #{ns}...\n"
    jscode = (ns == 'closurekitchen' ?
              conv.optimize(File.join(CODEMIRROR_DIR, 'js/codemirror.js')) + "\n" : '')
    jscode += conv.compile_closure_app(ns + '.App', nil, *SCRIPT_DIRS)
    File.open(File.join(SERVER_DIR, STATIC_DIR, ns + '.js'), 'w') do |file|
      file << jscode
    end
  end
end

task :closurefiles do
  ['closure/goog/css', 'closure/goog/images'].each do |dirname|
    copy_dir(File.join(CLOSURE_LIB_DIR, dirname),
             File.join(SERVER_DIR, 'closure-library', dirname))
  end
end

task :closurejs => [SERVER_JS_TRGS, SERVER_DEPS_PY].flatten

rule(/^#{SERVER_JS_REGEX}.*\.js$/u =>
     [proc {|n| File.join(CLOSURE_LIB_DIR, n.gsub(/^#{SERVER_JS_REGEX}/u, '')) }]) do |t|
  print "optimizing #{File.basename(t.source)}...\n"
  mkdir_p(File.dirname(t.name), :verbose => false)
  basename = File.basename(t.name)
  jscode   = IO.read(t.source).gsub(/^\s*goog\.require\s*\(\s*[\'\"][\w.]+[\'\"]\s*\)\s*;?/u,'')
  if (basename == 'datetimesymbols.js'     ||
      basename == 'datetimesymbolsext.js'  ||
      basename == 'datetimepatterns.js'    ||
      basename == 'datetimepatternsext.js' ||
      basename == 'numberformatsymbols.js')
    klass = {
      'datetimesymbols.js'     => 'goog.i18n.DateTimeSymbols',
      'datetimesymbolsext.js'  => 'goog.i18n.DateTimeSymbols',
      'datetimepatterns.js'    => 'goog.i18n.DateTimePatterns',
      'datetimepatternsext.js' => 'goog.i18n.DateTimePatterns',
      'numberformatsymbols.js' => 'goog.i18n.NumberFormatSymbols'
    }[basename]
    regex = /^#{Regexp.escape(klass)}_(\w+)\s*\=.+?\;\s*$/mu
    lang  = []
    exist = false
    jscode = jscode.gsub(regex) do |match|
      if $1 == 'en'
        exist = true
        match
      else
        lang << $1
        ''
      end
    end.gsub(/^if\s*\(\s*goog\.LOCALE.+/mu, '')
    jscode += lang.map{|s| "#{klass}_#{s} = #{klass}_en;\n" }.join('')
    jscode += "#{klass} = #{klass}_en;\n" if exist
  end
  jscode = JavaScriptOptimizer.new(SERVER_JS_OPTS).optimize_str(jscode)
  File.open(t.name, 'w') {|file| file << jscode }
end

task :depspy => SERVER_DEPS_PY

file SERVER_DEPS_PY => File.join(CLOSURE_LIB_DIR, 'closure/goog/deps.js') do |t|
  files   = {}
  classes = {}
  pathrex = /^#{Regexp.escape(CLOSURE_LIB_DIR)}\/*/
  IO.read(t.prerequisites[0]).scan(/goog\.addDependency\(([^\)]+)\)/) do |args|
    fname, provides, requires = eval('[' + args[0] + ']')
    fname = File.expand_path(File.join(CLOSURE_LIB_DIR, 'closure/goog', fname)).sub!(pathrex, '')
    fname = File.join(File.basename(SERVER_JS_DIR), fname)
    files[fname] = [provides, requires]
    provides.each{|cname| classes[cname] = fname }
  end
  files   = files.map   {|key, value| "\t#{key.inspect}: #{value.inspect}" }
  classes = classes.map {|key, value| "\t#{key.inspect}: #{value.inspect}" }
  File.open(t.name, 'w') do |file|
    file << "closure_files = {\n"
    file << files.join(",\n")
    file << " }\n"
    file << "closure_classes = {\n"
    file << classes.join(",\n")
    file << " }\n"
  end
end
