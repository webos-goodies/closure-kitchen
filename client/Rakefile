# -*- mode:ruby -*-

require 'rake/clean'
require 'erb'

PYTHON          = 'python'
JAVA            = 'java'
CLOSURECOMPILER = File.expand_path('../bin/compiler.jar')
YUICOMPRESSOR   = File.expand_path('../bin/yuicompressor.jar')

CLOSURE_LIB_DIR = File.expand_path('closure-library')
DEPSWRITER      = File.join(CLOSURE_LIB_DIR, 'closure/bin/build/depswriter.py')
CLOSUREBUILDER  = File.join(CLOSURE_LIB_DIR, 'closure/bin/build/closurebuilder.py')
DEPS_FILE       = 'deps.js'
SCRIPT_DIRS     = ['scripts', 'wgui']
STATIC_DIR      = 'files'
CODEMIRROR_DIR  = 'codemirror'
CODEMIRROR_JS   = ['util.js','stringstream.js','select.js','undo.js','editor.js','tokenize.js']
CODEMIRROR_CSS  = ['xmlcolors.css', 'jscolors.css',	'csscolors.css']
EXTERNS         = ['externs/codemirror.js']

SERVER_DIR      = File.expand_path('../server')
SERVER_JS_DIR   = File.join(SERVER_DIR, 'closurejs')
SERVER_JS_REGEX = Regexp.escape(SERVER_JS_DIR)
SERVER_DEPS_PY  = File.join(SERVER_DIR, 'deps.py')

SERVER_JS_SRCS  = FileList[File.join(CLOSURE_LIB_DIR, 'closure/**/*.js'),
                           File.join(CLOSURE_LIB_DIR, 'third_party/**/*.js')]
SERVER_JS_SRCS.exclude('**/*_test.js').exclude('**/deps.js')
SERVER_JS_TRGS  = SERVER_JS_SRCS.gsub(/^#{Regexp.escape(CLOSURE_LIB_DIR)}/u, SERVER_JS_DIR)

CLOBBER.include(File.join(SERVER_DIR, STATIC_DIR))
CLOBBER.include(File.join(SERVER_DIR, 'closure-library'))
CLOBBER.include(SERVER_JS_DIR)
CLOBBER.include(SERVER_DEPS_PY)

OPTIMIZE_OPTIONS = {
  :python          => PYTHON,
  :java            => JAVA,
  :yuicompressor   => YUICOMPRESSOR,
  :closurecompiler => CLOSURECOMPILER,
  :closurelibrary  => CLOSURE_LIB_DIR,
  :closurebuilder  => CLOSUREBUILDER,
  :closureopts     => {
    '--define'            => 'goog.DEBUG=false',
    '--output_wrapper'    => '(function(){%output%})();',
    '--externs'           => EXTERNS,
    '--compilation_level' => 'ADVANCED_OPTIMIZATIONS'
  },
  :css_url_map     => [[/^\.\.\/images\/tree\/(.+)/u, File.join(STATIC_DIR, 'images/\1')]]
}
SERVER_JS_OPTS = OPTIMIZE_OPTIONS.merge( {
  :optimize    => true,
  :closureopts => { '--compilation_level' => 'SIMPLE_OPTIMIZATIONS' }
})


class JavaScriptOptimizer
  def initialize(config = {})
    @java            = config[:java]            || 'java'
    @python          = config[:python]          || 'python'
    @yuicompressor   = config[:yuicompressor]   || 'yuicompressor.jar'
    @closurecompiler = config[:closurecompiler] || 'compiler.jar'
    @closurelibrary  = config[:closurelibrary]  || 'closure-library'
    @closurebuilder  = (config[:closurebuilder] ||
                        File.join(@closurelibrary, 'closure/bin/build/closurebuilder.py'))
    @closureopts     = config[:closureopts]     || ''
    @optimize        = config[:optimize]
  end

  def optimize_str(code)
    code = exec([@java, '-jar', @yuicompressor, '--type', 'js'], code) if @optimize
    code
  end

  def optimize(*paths)
    optimize_str(paths.map{|path| IO.read(path) }.join("\n"))
  end

  def compile_str(compiler_opts, code)
    if @optimize
      opts = build_closure_opts(@closureopts.merge(compiler_opts))
      code = exec([@java, '-jar', @closurecompiler, opts], code)
    end
    code
  end

  def compile(compiler_opts, *paths)
    if @optimize
      opts = build_closure_opts(@closureopts.merge(compiler_opts))
      code = exec([@java, '-jar', @closurecompiler, opts,
                   paths.map{|path| ['--js', path] }])
    else
      code = paths.map{|path| IO.read(path) }.join("\n")
    end
    code
  end

  def compile_closure_app(namespace, compiler_opts=nil, *paths)
    cmd  = [@python, @closurebuilder, '-n', namespace, "--root=#{@closurelibrary}",
            paths.map{|path| "--root=#{path}" }]
    code = ''
    if @optimize
      opts = build_closure_opts(@closureopts.merge(compiler_opts || {}))
      code = exec([cmd, '-o', 'compiled', '-c', @closurecompiler,
                   opts.map{|s| ['-f', s] }])
    else
      opts = build_closure_opts(@closureopts.merge(compiler_opts || {}))
      code = exec([cmd, '-o', 'script'])
    end
    code
  end

  private

  def build_closure_opts(opts)
    opts.map do |key, values|
      [*values].map{|v| "#{key}=#{v}" }
    end
  end

  def exec(cmd, stdin = '')
    stdout = ''
    IO.popen([*cmd].flatten.map{|s| '"'+s+'"'}.join(' '), 'r+') do |pipe|
      pipe.write(stdin)
      pipe.close_write
      stdout = pipe.read
    end
    stdout
  end
end

class CssOptimizer
  def initialize(config = {})
    @java          = config[:java]            || 'java'
    @yuicompressor = config[:yuicompressor]   || 'yuicompressor.jar'
    @css_url_map   = config[:css_url_map]     || []
    @optimize      = config[:optimize]
  end

  def optimize(*paths)
    css = paths.map{|path| IO.read(path) }.join("\n")
    css = map_url(css)       unless @css_url_map.empty?
    css = yuicompressor(css) if @optimize
    css
  end

  def expand(*paths)
    css = paths.map{|path| expand_import(path) }.join("\n")
    css = map_url(css)       unless @css_url_map.empty?
    css = yuicompressor(css) if @optimize
    css
  end

  private

  def remove_comments(css)
    css.gsub(/\/\*.*?\*\//mu, '')
  end

  def expand_import(path)
    dir = File.expand_path(File.dirname(path))
    css = IO.read(path)
    css = remove_comments(css)
    css = css.gsub(/^@import(?:\s+url\()?\s*[\"\']?([^\"\'\)]+)[\"\']?\s*\)?([^;]*);/u) do
      text, url, media = $0, $1.strip, $2.strip
      if /^(?:https?:\/)\//u === url
        text
      else
        sub_css = expand_import(File.join(dir, url))
        unless media.empty?
          sub_css = "@media #{media} {\n#{sub_css}\n}\n"
        end
        sub_css
      end
    end
  end

  def map_url(css)
    css.gsub(/(\s)url\(\s*[\"\']?([^\"\'\)]+)[\"\']?\s*\)/u) do
      space, url = $1, $2.strip
      @css_url_map.each do |pattern, replace|
        if pattern === url
          url.gsub!(pattern, replace)
          break
        end
      end
      "#{space}url(\"#{url}\")"
    end
  end

  def yuicompressor(css)
    exec([@java, '-jar', @yuicompressor, '--type', 'css'], css)
  end

  def exec(cmd, stdin = '')
    stdout = ''
    IO.popen([*cmd].flatten.map{|s| '"'+s+'"'}.join(' '), 'r+') do |pipe|
      pipe.write(stdin)
      pipe.close_write
      stdout = pipe.read
    end
    stdout
  end
end

class HtmlOptimizer

  def initialize(config = {})
    @java            = config[:java]            || 'java'
    @python          = config[:python]          || 'python'
    @yuicompressor   = config[:yuicompressor]   || 'yuicompressor.jar'
    @closurecompiler = config[:closurecompiler] || 'compiler.jar'
    @closurelibrary  = config[:closurelibrary]  || 'closure-library'
    @closurebuilder  = (config[:closurebuilder] ||
                        File.join(@closurelibrary, 'closure/bin/build/closurebuilder.py'))
    @closureopts     = config[:closureopts]     || ''
    @css_url_map     = config[:css_url_map]     || []
    @optimize        = config[:optimize]
    @pre_tag_regex   = nil

    pre_tag = config[:pre_tag] ? [*config[:pre_tag]] : ['pre', 'script', 'title']
    unless pre_tag.empty?
      pre_tag = pre_tag.map{|s| Regexp.quote(s) }.join('|')
      @pre_tag_regex = /<(#{pre_tag})[\s>].*?<\/\1\s*>/mui
    end

    @jsoptimizer  = JavaScriptOptimizer.new(config)
    @cssoptimizer = CssOptimizer.new(config)
  end

  def render_str(str)
    str = str.gsub(/<!--\[del\].*?\[\/del\]-->/mu, '')
    str = str.gsub(/<!--\[uncomment\](.*?)-->/mu){ $1 }
    erb = ERB.new(str)
    optimize_html(erb.result(get_binding()))
  end

  def render_file(path)
    str = IO.read(path)
    Dir.chdir(File.dirname(path)) do
      render_str(str)
    end
  end

  def include_file(path)
    IO.read(path)
  end

  def expand_css(*paths)
    @cssoptimizer.expand(*paths)
  end

  def compress_css(*paths)
    @cssoptimizer.optimize(*paths)
  end

  def escape_js(str)
    str.gsub(/<\/(script)/ui, '<\\/\1')
  end

  def include_js(path)
    escape_js(IO.read(path))
  end

  def compress_js(*paths)
    escape_js(@jsoptimizer.optimize(*paths))
  end

  def compile_js(compiler_opts={}, *paths)
    escape_js(@jsoptimizer.compile(compiler_opts, *paths))
  end

  def compile_closure_app(namespace, compiler_opts=nil, *paths)
    escape_js(@jsoptimizer.compile_closure_app(namespace, compiler_opts, *paths))
  end

  def optimize_html(html)
    html = html.dup
    if @optimize
      html.gsub!(/<\!--.*?-->/mu, '')
      html.gsub!(/[~^]/u) {|c| c == '~' ? '^T~' : '^E~' }
      preserved = []
      if @pre_tag_regex
        html.gsub!(@pre_tag_regex) do |pre|
          preserved << pre
          "^#{preserved.size-1}~"
        end
      end
      html.gsub!(/<[A-Za-z](?:[^>]*)>/u) do |tag|
        tag.gsub(/([\"\']).+?\1/mui) do |attr|
          preserved << attr
          "^#{preserved.size-1}~"
        end
      end
      html.gsub!(/\s+/u, ' ')
      html.gsub!(/\^(\d+)~/u) { preserved[$1.to_i] }
      html.gsub!(/\^([TE])~/u) { $1 == 'T' ? '~' : '^' }
    end
    html
  end

  def get_binding()
    binding
  end

  def exec(cmd, stdin = '')
    stdout = ''
    IO.popen([*cmd].flatten.map{|s| '"'+s+'"'}.join(' '), 'r+') do |pipe|
      pipe.write(stdin)
      pipe.close_write
      stdout = pipe.read
    end
    stdout
  end

end

def copy_dir(src, dst)
  mkdir_p(dst, :verbose => false)
  dirs  = []
  files = []
  Dir.chdir(src) do
    Dir.glob('**/*') do |fname|
      (File.directory?(fname) ? dirs : files) << fname
    end
  end
  dirs.each do |dirname|
    mkdir_p(File.join(dst, dirname), :verbose => false)
  end
  files.each do |fname|
    cp(File.join(src, fname), File.join(dst, fname), :verbose => false)
  end
end

task :deps do
  sh ["#{PYTHON} #{DEPSWRITER}",
      SCRIPT_DIRS.map {|dir| "--root_with_prefix='#{dir} ../../../#{dir}'" },
      "--output_file=#{DEPS_FILE}"].flatten.join(' ')
end

task :build => [:index, :files, :script, :closurefiles, :closurejs] do
end

task :index do |t, args|
  opts            = OPTIMIZE_OPTIONS.dup
  opts[:optimize] = args['optimize'] != 'no'
  conv            = HtmlOptimizer.new(opts)
  html            = conv.render_file('index.html')
  File.open(File.join(SERVER_DIR, 'index.html'), 'w') do |file|
    file << html
  end
end

task :files do
  copy_dir(STATIC_DIR, File.join(SERVER_DIR, STATIC_DIR))
end

task :script do |t, args|
  opts            = OPTIMIZE_OPTIONS.dup
  opts[:optimize] = args['optimize'] != 'no'
  conv            = JavaScriptOptimizer.new(opts)
  jscode          = conv.optimize(File.join(CODEMIRROR_DIR, 'js/codemirror.js')) + "\n";
  jscode         += conv.compile_closure_app('closurekitchen.App', nil, *SCRIPT_DIRS)
  File.open(File.join(SERVER_DIR, STATIC_DIR, 'script.js'), 'w') do |file|
    file << jscode
  end

  mkdir_p(File.join(SERVER_DIR, STATIC_DIR, 'codemirror'))

  jsfiles = (CODEMIRROR_JS + ['tokenizejavascript.js', 'parsejavascript.js']).map do |fname|
    File.join(CODEMIRROR_DIR, 'js', fname)
  end
  jscode = conv.optimize(*jsfiles)
  File.open(File.join(SERVER_DIR, STATIC_DIR, 'codemirror/javascript.js'), 'w') do |file|
    file << jscode
  end

  jsfiles = (CODEMIRROR_JS + ['parsexml.js', 'parsecss.js', 'tokenizejavascript.js',
                              'parsejavascript.js', 'parsehtmlmixed.js']).map do |fname|
    File.join(CODEMIRROR_DIR, 'js', fname)
  end
  jscode = conv.optimize(*jsfiles)
  File.open(File.join(SERVER_DIR, STATIC_DIR, 'codemirror/html.js'), 'w') do |file|
    file << jscode
  end

  cssfiles = CODEMIRROR_CSS.map {|fname| File.join(CODEMIRROR_DIR, 'css', fname) }
  csscode  = CssOptimizer.new(opts).optimize(*cssfiles)
  File.open(File.join(SERVER_DIR, STATIC_DIR, 'codemirror/codemirror.css'), 'w') do |file|
    file << csscode
  end
end

task :closurefiles do
  ['closure/goog/css', 'closure/goog/images'].each do |dirname|
    copy_dir(File.join(CLOSURE_LIB_DIR, dirname),
             File.join(SERVER_DIR, 'closure-library', dirname))
  end
end

task :closurejs => [SERVER_JS_TRGS, SERVER_DEPS_PY].flatten

rule(/^#{SERVER_JS_REGEX}.*\.js$/u =>
     [proc {|n| File.join(CLOSURE_LIB_DIR, n.gsub(/^#{SERVER_JS_REGEX}/u, '')) }]) do |t|
  print "optimizing #{File.basename(t.source)}...\n"
  mkdir_p(File.dirname(t.name), :verbose => false)
  basename = File.basename(t.name)
  jscode   = IO.read(t.source).gsub(/^\s*goog\.require\s*\(\s*[\'\"][\w.]+[\'\"]\s*\)\s*;?/u,'')
  if (basename == 'datetimesymbols.js'     ||
      basename == 'datetimesymbolsext.js'  ||
      basename == 'datetimepatterns.js'    ||
      basename == 'datetimepatternsext.js' ||
      basename == 'numberformatsymbols.js')
    klass = {
      'datetimesymbols.js'     => 'goog.i18n.DateTimeSymbols',
      'datetimesymbolsext.js'  => 'goog.i18n.DateTimeSymbols',
      'datetimepatterns.js'    => 'goog.i18n.DateTimePatterns',
      'datetimepatternsext.js' => 'goog.i18n.DateTimePatterns',
      'numberformatsymbols.js' => 'goog.i18n.NumberFormatSymbols'
    }[basename]
    regex = /^#{Regexp.escape(klass)}_(\w+)\s*\=.+?\;\s*$/mu
    lang  = []
    exist = false
    jscode = jscode.gsub(regex) do |match|
      if $1 == 'en'
        exist = true
        match
      else
        lang << $1
        ''
      end
    end.gsub(/^if\s*\(\s*goog\.LOCALE.+/mu, '')
    jscode += lang.map{|s| "#{klass}_#{s} = #{klass}_en;\n" }.join('')
    jscode += "#{klass} = #{klass}_en;\n" if exist
  end
  jscode = JavaScriptOptimizer.new(SERVER_JS_OPTS).optimize_str(jscode)
  File.open(t.name, 'w') {|file| file << jscode }
end

task :depspy => SERVER_DEPS_PY

file SERVER_DEPS_PY => File.join(CLOSURE_LIB_DIR, 'closure/goog/deps.js') do |t|
  files   = {}
  classes = {}
  pathrex = /^#{Regexp.escape(CLOSURE_LIB_DIR)}\/*/
  IO.read(t.prerequisites[0]).scan(/goog\.addDependency\(([^\)]+)\)/) do |args|
    fname, provides, requires = eval('[' + args[0] + ']')
    fname = File.expand_path(File.join(CLOSURE_LIB_DIR, 'closure/goog', fname)).sub!(pathrex, '')
    fname = File.join(File.basename(SERVER_JS_DIR), fname)
    files[fname] = [provides, requires]
    provides.each{|cname| classes[cname] = fname }
  end
  files   = files.map   {|key, value| "\t#{key.inspect}: #{value.inspect}" }
  classes = classes.map {|key, value| "\t#{key.inspect}: #{value.inspect}" }
  File.open(t.name, 'w') do |file|
    file << "closure_files = {\n"
    file << files.join(",\n")
    file << " }\n"
    file << "closure_classes = {\n"
    file << classes.join(",\n")
    file << " }\n"
  end
end
